import os
import time

from django.contrib.auth.models import User
from django.db import models
from django.dispatch import receiver
from django.db.models.signals import post_save, pre_delete

from collector import settings


class Profile(models.Model):
    """
    –ú–æ–¥–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –û–Ω–∞ –¥–æ–ø–æ–ª–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –î–∂–∞–Ω–≥–æ –∏ –∏–º–µ–µ—Ç —Å–≤—è–∑—å 1–∫1 —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –î–∂–∞–Ω–≥–æ –º–æ–¥–µ–ª—å—é User.
    """
    MLNG_CHANNELS_CHOICES = [
        ('tlg', 'Telegram'),
        ('whtsp', 'WhatsApp'),
    ]
    dflt_txt = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client}!\n' \
               '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç {my_comp}.\n' \
               '–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ {date} –æ—á–µ—Ä–µ–¥–Ω–æ–π –ø–ª–∞—Ç–µ–∂ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} —Ä—É–±–ª–µ–π. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!\nüê¶'
    # –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î –û–î–ò–ù-–ö-–û–î–ù–û–ú–£
    user = models.OneToOneField(to=User, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', on_delete=models.CASCADE)
    company_name = models.CharField(verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏', max_length=254, blank=True, null=True)
    dflt_mlng_txt = models.TextField(verbose_name='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', max_length=500, default=dflt_txt)
    tlg_session_file = models.FileField(verbose_name='–§–∞–π–ª —Å–µ—Å—Å–∏–∏', upload_to='session_files/', blank=True, null=True)
    tlg_acc_info = models.CharField(verbose_name='–ò–Ω—Ñ–æ –æ Telegram –∞–∫–∫–∞—É–Ω—Ç–µ', max_length=200, blank=True, null=True)
    mailing_channel = models.CharField(verbose_name='–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', max_length=50,
                                       choices=MLNG_CHANNELS_CHOICES, default='tlg')
    green_api_id_instance = models.CharField(verbose_name='IdInstance', max_length=200, blank=True, null=False)
    green_api_token_instance = models.CharField(verbose_name='ApiTokenInstance', max_length=200, blank=True, null=False)
    api_token_for_1c = models.CharField(verbose_name='1C API Token', max_length=50, blank=False, null=True)
    balance = models.DecimalField(verbose_name='–ë–∞–ª–∞–Ω—Å', max_digits=10, decimal_places=2, default=0)
    reserved_for_mailing = models.DecimalField(verbose_name='–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ —Ä–∞—Å—Å—ã–ª–∫—É', max_digits=10,
                                               decimal_places=2, default=0)
    agreement_accepted = models.BooleanField(verbose_name='–ü—Ä–∏–Ω—è—Ç–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–µ—Ä—Ç—ã', default=True)

    class Meta:
        verbose_name = '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        verbose_name_plural = '–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        db_table = '–ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'

    def __str__(self):
        return f'–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.user}'


@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ –¥–ª—è –ø–æ–ª—è –û–î–ò–ù-–ö-–û–î–ù–û–ú–£.
    –û–Ω–∞ –Ω—É–∂–Ω–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è, –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ User. –°–∏–≥–Ω–∞–ª —ç—Ç–æ - post_save.
    """
    if created:
        Profile.objects.create(user=instance)


@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ –¥–ª—è –ø–æ–ª—è –û–î–ò–ù-–ö-–û–î–ù–û–ú–£.
    –û–Ω–∞ –Ω—É–∂–Ω–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ User. –°–∏–≥–Ω–∞–ª —ç—Ç–æ - post_save.
    """
    instance.profile.save()


@receiver(pre_delete, sender=Profile)
def delete_session_file(sender, instance, **kwargs):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ Profile –∏ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ —Ç–µ–ª–µ–≥—Ä–∞–º
    """
    if instance.tlg_session_file:
        file_path_string = os.path.join(settings.MEDIA_ROOT, instance.tlg_session_file.name)
        if os.path.exists(file_path_string):
            os.remove(file_path_string)


class Transaction(models.Model):
    """
    –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    """
    TRANSACTION_TYPE_LST = [
        ('replenishment', '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'),
        ('write-off', '—Å–ø–∏—Å–∞–Ω–∏–µ'),
    ]
    user = models.ForeignKey(verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', to=User, on_delete=models.CASCADE)
    transaction_type = models.CharField(verbose_name='–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', choices=TRANSACTION_TYPE_LST, max_length=13)
    transaction_datetime = models.DateTimeField(verbose_name='–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', auto_now_add=True)
    amount = models.DecimalField(verbose_name='–°—É–º–º–∞', default=0, max_digits=10, decimal_places=2)
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', max_length=250, null=True)

    class Meta:
        verbose_name = '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è'
        verbose_name_plural = '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
        ordering = ['-id']


class DyatelSettings(models.Model):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞ (—Ö—Ä–∞–Ω–∏–ª–∏—â–µ key-value).
    """
    key = models.CharField(verbose_name='–ö–ª—é—á', max_length=100)
    value = models.TextField(verbose_name='–ó–Ω–∞—á–µ–Ω–∏–µ', max_length=23000)

    class Meta:
        verbose_name = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞'
        verbose_name_plural = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'
        ordering = ['-id']


class SMSCode(models.Model):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ—ã –æ –°–ú–° –∫–æ–¥–∞—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    phone_number = models.CharField(verbose_name='—Ç–µ–ª–µ—Ñ–æ–Ω', max_length=23)
    code = models.CharField(verbose_name='–∫–æ–¥', max_length=4)
    expired_at = models.FloatField(verbose_name='–∫–æ–≥–¥–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç(—Å–µ–∫.)', default=time.time() + 60 * 5)
    input_attempts = models.IntegerField(verbose_name='–ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞', default=5)
    already_registered = models.BooleanField(verbose_name='–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', default=False)

    class Meta:
        verbose_name = '–°–ú–° –∫–æ–¥'
        verbose_name_plural = '–°–ú–° –∫–æ–¥—ã'
        ordering = ['-pk']


class PaymentsInvoices(models.Model):
    """
    –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ—ã –æ —Å—á–µ—Ç–∞—Ö –Ω–∞ –æ–ø–ª–∞—Ç—É.
    """
    user = models.ForeignKey(verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', to=User, on_delete=models.CASCADE)
    amount = models.DecimalField(verbose_name='–°—É–º–º–∞', max_digits=10, decimal_places=2)
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', max_length=1000)
    payment_url = models.URLField(verbose_name='–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É', max_length=1000, blank=True, null=False)
    pass_1_hash = models.CharField(verbose_name='–•—ç—à –∏–∑ –ø–∞—Ä–æ–ª—è 1', max_length=100, blank=True, null=False)
    is_paid = models.BooleanField(verbose_name='–æ–ø–ª–∞—á–µ–Ω', default=False)
    created_at = models.DateTimeField(verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', auto_now_add=True)

    class Meta:
        verbose_name = '–°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É'
        verbose_name_plural = '–°—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É'
        ordering = ['-pk']
