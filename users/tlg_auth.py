from django.contrib.auth.models import User
from collector.settings import TG_API_ID, TG_API_HASH, BASE_DIR, TELEGRAM_CLIENTS_DCT, TELEGRAM_AUTH_RESULTS, LOOP
from users.models import Profile
from loguru import logger


async def send_auth_code(user_id, phone_number):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–º–µ—Ä, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —Ç–µ–ª–µ–≥—Ä–∞–º.
    """
    from pyrogram import Client
    from pyrogram.errors import BadRequest
    client = Client(
        f"{user_id}_session",
        api_id=TG_API_ID,
        api_hash=TG_API_HASH,
        phone_number=phone_number,
        workdir=f"{BASE_DIR}/media/session_files/",
    )
    TELEGRAM_CLIENTS_DCT[user_id] = client
    await client.connect()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
    try:
        sent_code = await client.send_code(phone_number=phone_number)
        TELEGRAM_AUTH_RESULTS[phone_number] = {'sent_code': sent_code}
        result, description = True, sent_code
    except BadRequest as error:
        result, description = False, error
    except Exception as other_error:
        result, description = False, other_error
    return result, description


def init_tlg_client(user_id, phone_number):
    """
    –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞.
    # """
    # loop = asyncio.new_event_loop()
    # asyncio.set_event_loop(loop)
    result = LOOP.run_until_complete(send_auth_code(user_id=user_id, phone_number=phone_number))
    return result   # (result: bool, description: SentCode | BadRequest)


async def check_confirm_code(user_id, code):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    from pyrogram.errors import BadRequest, SessionPasswordNeeded

    client = TELEGRAM_CLIENTS_DCT[user_id]
    sent_code = TELEGRAM_AUTH_RESULTS[client.phone_number]['sent_code']  # –î–æ—Å—Ç–∞—ë–º –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_code_hash = sent_code.phone_code_hash
    try:
        signed_in = await client.sign_in(client.phone_number, phone_code_hash, code)  # –í–µ—Ä–Ω—ë—Ç –æ–±—ä–µ–∫—Ç User
        await client.initialize()
        await client.get_contacts()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        await client.stop()
        success = True  # –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        two_fa_need = False     # –ù—É–∂–µ–Ω –ª–∏ –ø–∞—Ä–æ–ª—å 2-–§–ê
        # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –∑–∞–±–∏–≤–∞–ª–∏ –ø–∞–º—è—Ç—å
        TELEGRAM_AUTH_RESULTS.pop(client.phone_number)
        TELEGRAM_CLIENTS_DCT.pop(user_id)
        return success, two_fa_need, signed_in
    except SessionPasswordNeeded:
        pass_hint = await client.get_password_hint()
        TELEGRAM_AUTH_RESULTS[client.phone_number] = {'pass_hint': pass_hint}
        success = True
        two_fa_need = True
        return success, two_fa_need, pass_hint
    except BadRequest as error:
        success = False
        two_fa_need = False
        return [success, two_fa_need, error]


def confirm_code(user_id, code):
    """
    –î–æ—Å—Ç–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ pyrogram –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    # loop = TELEGRAM_CLIENTS_DCT[user_id].loop
    result = LOOP.run_until_complete(check_confirm_code(user_id=user_id, code=code))
    if result[0] and not result[1]:  # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ BadRequest
        # loop.close()
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª session_string –∫ –ø—Ä–æ—Ñ–∏–ª—é
        profile_obj = Profile.objects.get(id=user_id)
        profile_obj.tlg_session_file = f'{BASE_DIR}/media/session_files/{user_id}_session.session'
        profile_obj.save()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å–µ—Å—Å–∏–∏
        check_session_rslt = checking_the_session(user_id=user_id)
        if not check_session_rslt:  # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –ù–ï —É–¥–∞–ª–∞—Å—å
            result.append(False)
    return result  # (success: bool, two_fa_need: bool, description: User | pass_hint | error)


async def check_2fa_tlg_password(user_id, two_fa_pass):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å 2-–§–ê, –∫–∏–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è. –í–µ—Ä–Ω—ë—Ç –æ–±—ä–µ–∫—Ç User (–∫–∞–∫ –∏ –º–µ—Ç–æ–¥ sing_in –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞) –∏–ª–∏ exception BadRequest
    """
    from pyrogram.errors import BadRequest

    client = TELEGRAM_CLIENTS_DCT[user_id]
    try:
        await client.check_password(password=two_fa_pass)
        # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –∑–∞–±–∏–≤–∞–ª–∏ –ø–∞–º—è—Ç—å
        TELEGRAM_AUTH_RESULTS.pop(client.phone_number)
        TELEGRAM_CLIENTS_DCT.pop(user_id)
        await client.initialize()
        await client.get_contacts()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        await client.stop()
        return True     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
    except BadRequest as error:
        return False


def check_2fa_pass(user_id, two_fa_pass):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å 2-–§–ê.
    """
    # loop = TELEGRAM_CLIENTS_DCT[user_id].loop
    result = LOOP.run_until_complete(check_2fa_tlg_password(user_id=user_id, two_fa_pass=two_fa_pass))
    if result:  # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
        # loop.close()
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª session_string –∫ –ø—Ä–æ—Ñ–∏–ª—é
        user_obj = User.objects.get(id=user_id)
        profile_obj = Profile.objects.get(user=user_obj)
        profile_obj.tlg_session_file = f'{BASE_DIR}/media/session_files/{user_id}_session.session'
        profile_obj.save()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å–µ—Å—Å–∏–∏
        check_session_rslt = checking_the_session(user_id=user_id)
        if check_session_rslt:  # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ–π
            return [True, True]
        else:   # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å
            return [True, False]
    else:   # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å
        return [False]


async def send_test_message(user_id, session_string=None):  # TODO: session_string —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–∞–¥–æ —É–±—Ä–∞—Ç—å
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º.
    """
    from pyrogram import Client

    # async with Client(f"{user_id}_session_string", session_string=session_string) as client:
    async with Client(f'{BASE_DIR}/media/session_files/{user_id}_session') as client:
        try:
            await client.send_message('me', '<b>TEST MESSAGE FROM <u>DYATEL</u>!<b>\nEverything oküëå')
            await client.send_message('me', 'üê¶')
            this_user = await client.get_users("me")
            print()
            result = (True, this_user.id, this_user.first_name, this_user.last_name)
        except Exception as error:
            logger.warning(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏. –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\t{error}')
            result = (False,)

        # # –≠–∫—Å–ø–æ—Ä—Ç —Å–µ—Å—Å–∏–∏ –≤ —Å—Ç—Ä–æ–∫—É
        # session_string = await client.export_session_string()
        # with open(f'{BASE_DIR}/media/session_files/{user_id}_session_string',
        #           mode='w', encoding='utf-8') as session_str_file:
        #     session_str_file.write(session_string)
    return result


def checking_the_session(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º.
    """
    # TODO: –ª–æ–≥–∏–∫–∞ —Å–æ —Å—Ç—Ä–æ–∫–æ–π —Å–µ—Å—Å–∏–∏, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –±—É–¥–µ—Ç –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞
    # # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î
    # user_obj = User.objects.get(id=user_id)
    # session_file_path = Profile.objects.get(user=user_obj).tlg_session_file
    # session_string = str(session_file_path.read(), 'UTF-8')
    # result = LOOP.run_until_complete(send_test_message(user_id=user_id, session_string=session_string))
    result = LOOP.run_until_complete(send_test_message(user_id=user_id))
    if result[0]:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º
        profile_obj = Profile.objects.get(user=User.objects.get(id=user_id))
        profile_obj.tlg_acc_info = f'TG ID: {result[1]} | {result[2], result[3]}'
        profile_obj.save()
    return result[0]

