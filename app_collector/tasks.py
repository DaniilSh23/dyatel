import csv
import datetime
import os

import pandas as pd
import loguru
from celery import shared_task
from django.contrib.auth.models import User
from loguru import logger
from app_collector.models import Clients, Mailings, ClientsFiles
from collector.settings import BASE_DIR
from users.models import Profile, DyatelSettings, Transaction
from whatsapp_api_client_python import API
from whatsapp_api_client_python.response import Response

# –í –∏–≤–µ–Ω—Ç –ª—É–ø–µ –Ω–µ–ª—å–∑—è –∫–∏–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î, –ø–æ—ç—Ç–æ–º—É —Å–æ–±–∏—Ä–∞–µ–º –≤—Å—é –∏–Ω—Ñ—É –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —ç—Ç–æ—Ç —Å–ª–æ–≤–∞—Ä–∏–∫
# –∏ –ø–æ—Å–ª–µ –∏–∑ –Ω–µ–≥–æ –±–µ—Ä—ë–º –∏–Ω—Ñ—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å—Å—ã–ª–æ–∫.
# –í —Å–ª–æ–≤–∞—Ä–µ —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç: {user_id: {send_status: str, send_datetime: datetime}}
SEND_RESULT = dict()


async def send_messages_async(app, contact, message, user_id, files_string):
    from pyrogram.types import InputMediaDocument

    files_lst = files_string.split('|')
    async with app:
        try:
            if len(files_lst) == 1:  # –û–¥–∏–Ω —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é
                send_rslt = await app.send_document(
                    chat_id=str(contact),
                    document=files_lst[0],
                    caption=str(message)
                )
            elif len(files_lst) > 1:  # –§–∞–π–ª—ã, –∫–∞–∫ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
                send_rslt = await app.send_media_group(
                    chat_id=str(contact),
                    media=[InputMediaDocument(
                        media=i_file,
                        caption=message if i_indx == len(files_lst) - 1 else None)
                        for i_indx, i_file in enumerate(files_lst)]
                )
                send_rslt = send_rslt[-1]
            else:  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                send_rslt = await app.send_message(str(contact), str(message))

        except Exception as error:
            logger.warning(f'–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è TG –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {contact} –ù–ï –£–î–ê–õ–û–°–¨.\n–û—Ç–≤–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞:\n{error}')
            SEND_RESULT[user_id]['send_status'] = 'cncld'
            SEND_RESULT[user_id]['send_datetime'] = None
            SEND_RESULT[user_id]['send_info'] = f'‚õîÔ∏èTelegram –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error}'
            return
        SEND_RESULT[user_id]['send_status'] = 'cmplt'
        SEND_RESULT[user_id]['send_datetime'] = send_rslt.date
        SEND_RESULT[user_id]['send_info'] = 'üëå–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'


@shared_task
def sending_messages_tlg(user_id):
    """
    –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.
    """
    # –í–ê–ñ–ù–û! –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ. –ö–∞–∫–æ–≥–æ-—Ç–æ —Ö—Ä–µ–Ω–∞ –∏–Ω–∞—á–µ –æ—à–∏–±–∫–∏ –ª–µ—Ç—è—Ç —Å eventloop
    from pyrogram import Client
    logger.info(f'–°—Ç–∞—Ä—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ TELEGRAM —Ä–∞—Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID == {user_id}')

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_obj = User.objects.get(id=user_id)
    profile_obj = Profile.objects.get(user=user_obj)
    dflt_mlng_txt = profile_obj.dflt_mlng_txt
    company_name = profile_obj.company_name
    clients_lst = Clients.objects.filter(user=user_obj)
    tariff = DyatelSettings.objects.get(key='tariff').value.replace(' ', '')

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç pyrogram
    app = Client(f'{BASE_DIR}/media/session_files/{user_id}_session')

    success_send_count = 0
    for i_client in clients_lst:
        SEND_RESULT[user_id] = dict()

        # –ü–æ–ª—É—á–∏–º —Ñ–∞–π–ª—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        files_lst = ClientsFiles.objects.filter(client=i_client)
        files_string = '|'.join([i_file.file.name for i_file in files_lst])

        message = dflt_mlng_txt if not i_client.custom_mlng_txt else i_client.custom_mlng_txt
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message = message.replace('{amount}', str(i_client.amount_of_pmnt))
        message = message.replace('{date}', i_client.pmnt_date.strftime('%-d.%m.%Y %H:%M'))
        message = message.replace('{client}', i_client.client_name)
        message = message.replace('{my_comp}', company_name)

        app.run(send_messages_async(app=app, contact=i_client.telephone_or_username,
                                    message=message, user_id=user_id, files_string=files_string))

        send_status = SEND_RESULT[user_id].get('send_status')
        send_datetime = SEND_RESULT[user_id].get('send_datetime')
        mailing_obj = Mailings.objects.filter(client=i_client).first()
        mailing_obj.sending_status = send_status
        mailing_obj.send_info = SEND_RESULT[user_id].get('send_info')
        if send_datetime:
            mailing_obj.sent_datetime = send_datetime
        mailing_obj.save()

        # –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ, –æ—Ç–Ω–∏–º–∞–µ–º –±–∞–±–∫–∏ –æ—Ç —Å—É–º–º—ã —Ä–µ–∑–µ—Ä–≤–∞
        if send_status == 'cmplt':
            profile_obj.reserved_for_mailing = float(profile_obj.reserved_for_mailing) - float(tariff)
            profile_obj.save()
            success_send_count += 1

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º–µ
    profile_obj.balance = float(profile_obj.balance) + float(profile_obj.reserved_for_mailing)
    profile_obj.save()
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –æ—Å—Ç–∞—Ç–∫–∞ –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    Transaction.objects.create(
        user=user_obj,
        transaction_type='replenishment',
        amount=float(profile_obj.reserved_for_mailing),
        description=f'–í–æ–∑–≤—Ä–∞—Ç –æ—Å—Ç–∞—Ç–∫–∞ –æ—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ '
                    f'({float(profile_obj.reserved_for_mailing)} —Ä—É–±.). –¢–∞—Ä–∏—Ñ –∑–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {tariff} —Ä—É–±., '
                    f'–∫–æ–ª-–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {success_send_count}, –≤—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {len(clients_lst)}'
    )
    logger.success(f'–û–ö–û–ù–ß–ê–ù–ò–ï –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID == {user_id}')


@shared_task
def sending_messages_whtsp(user_id):
    """
    –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º —é–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ WhatsApp.
    """
    logger.info(f'–°—Ç–∞—Ä—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ WHATSAPP —Ä–∞—Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID == {user_id}')

    # –î–æ—Å—Ç–∞—ë–º –∏–∑ –ë–î –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    user_obj = User.objects.get(id=user_id)
    profile_obj = Profile.objects.get(user=user_obj)
    dflt_mlng_txt = profile_obj.dflt_mlng_txt
    company_name = profile_obj.company_name
    clients_lst = Clients.objects.filter(user=user_obj)
    tariff = DyatelSettings.objects.get(key='tariff').value.replace(' ', '')

    success_send_count = 0
    for i_client in clients_lst:  # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤
        mailing_obj = Mailings.objects.filter(client=i_client).first()

        message = dflt_mlng_txt if not i_client.custom_mlng_txt else i_client.custom_mlng_txt
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message = message.replace('{amount}', str(i_client.amount_of_pmnt))
        message = message.replace('{date}', i_client.pmnt_date.strftime('%-d.%m.%Y %H:%M'))
        message = message.replace('{client}', i_client.client_name)
        message = message.replace('{my_comp}', company_name)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∞—Ç—Å–∞–ø
        green_api = API.GreenApi(profile_obj.green_api_id_instance, profile_obj.green_api_token_instance)
        auth_status_rslt: Response = green_api.sending.sendMessage(
            f'{i_client.telephone_or_username.replace("+", "")}@c.us',
            message
        )
        # –ü–æ–ª—É—á–∏–º —Ñ–∞–π–ª—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        files_lst = ClientsFiles.objects.filter(client=i_client)
        send_files_rslt = []
        if len(files_lst) > 0:  # –ï—Å–ª–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å —Ñ–∞–π–ª—ã
            for j_file in files_lst:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –≤–∞—Ç—Å–∞–ø
                send_file_status: Response = green_api.sending.sendFileByUpload(
                    chatId=f'{i_client.telephone_or_username.replace("+", "")}@c.us',
                    path=f"{BASE_DIR}/media/{j_file.file.name}",
                    fileName=j_file.file_name
                )
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
                if send_file_status.code == 200:
                    logger.success(f'\t\t–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
                    send_files_rslt.append(True)
                else:
                    logger.warning(f'\t\t–§–∞–π–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
                    send_files_rslt.append(False)

        else:  # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç
            send_files_rslt = [True]  # –î–æ–±–∞–≤–ª—è–µ–º True –¥–ª—è –∑–∞–≥–ª—É—à–∫–∏

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –∑–∞–ø–∏—Å—å –∏—Ö –≤ –ë–î
        if auth_status_rslt.code == 200 and all(send_files_rslt):
            logger.success(f'\t–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ WhatsApp. –ö–æ–Ω—Ç–∞–∫—Ç: {i_client.telephone_or_username}')
            mailing_obj.sending_status = 'cmplt'
            mailing_obj.send_info = f'üëå–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ | ' \
                                    f'ID —Å–æ–æ–±—â–µ–Ω–∏—è WhatsApp: {auth_status_rslt.data.get("idMessage")}'
            mailing_obj.sent_datetime = datetime.datetime.now()
            success_send_count += 1
            # –û—Ç–Ω–∏–º–∞–µ–º –±–∞–±–∫–∏ –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
            profile_obj.reserved_for_mailing = float(profile_obj.reserved_for_mailing) - float(tariff)
            profile_obj.save()

        else:
            logger.warning(f'\t–ù–µ—É–¥–∞—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ WhatsApp. –ö–æ–Ω—Ç–∞–∫—Ç: {i_client.telephone_or_username}\n'
                           f'–ö–æ–Ω—Ç–∞–∫—Ç: {i_client.telephone_or_username} | –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message}')
            mailing_obj.sending_status = 'cncld'
            mailing_obj.send_info = f'‚õîÔ∏è–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. ' \
                                    f'–í–æ–∑–º–æ–∂–Ω–æ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—É: {i_client.telephone_or_username}'
            mailing_obj.sent_datetime = None
        mailing_obj.save()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º–µ
    profile_obj.balance = float(profile_obj.balance) + float(profile_obj.reserved_for_mailing)
    profile_obj.save()
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –æ—Å—Ç–∞—Ç–∫–∞ –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    Transaction.objects.create(
        user=user_obj,
        transaction_type='replenishment',
        amount=float(profile_obj.reserved_for_mailing),
        description=f'–í–æ–∑–≤—Ä–∞—Ç –æ—Å—Ç–∞—Ç–∫–∞ –æ—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤ '
                    f'({float(profile_obj.reserved_for_mailing)} —Ä—É–±.). –¢–∞—Ä–∏—Ñ –∑–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {tariff} —Ä—É–±., '
                    f'–∫–æ–ª-–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {success_send_count}, –≤—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {len(clients_lst)}'
    )
    logger.success(f'–û–ö–û–ù–ß–ê–ù–ò–ï –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ WhatsApp —Ä–∞—Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID == {user_id}')


@shared_task
def file_processing_with_clients(file_path, user_pk):
    """
    –ó–∞–¥–∞—á–∫–∞ celery –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
    """
    logger.info(f'–°—Ç–∞—Ä—Ç –∑–∞–¥–∞—á–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–∞–π–ª –∏–∑ excel –≤ csv –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫. –§–∞–π–ª –≤ excel –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º.
    excel_file = pd.read_excel(file_path)
    csv_path = f'{os.path.splitext(file_path)[0]}.csv'
    excel_file.to_csv(csv_path, index=False)
    os.remove(file_path)

    user_obj = User.objects.get(pk=user_pk)

    with open(csv_path, 'r') as csvfile:
        readable_file = csv.reader(csvfile)
        next(readable_file)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        for i_row in readable_file:
            try:
                Clients.objects.update_or_create(
                    telephone_or_username=i_row[1],
                    defaults={
                        "user": user_obj,
                        "client_name": i_row[0],
                        "telephone_or_username": i_row[1],
                        "amount_of_pmnt": i_row[2],
                        "pmnt_date": i_row[3],
                    }
                )
                logger.success(f'–°—Ç—Ä–æ–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!')
            except Exception as error:
                loguru.logger.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫—É: {i_row[0], i_row[1], i_row[2], i_row[3]}\n'
                                      f'–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {error}')
    # –£–¥–∞–ª—è–µ–º csv —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    os.remove(csv_path)
    logger.info(f'–û–∫–æ–Ω—á–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏')
